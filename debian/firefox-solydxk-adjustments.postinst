#!/bin/bash
# postinst script 
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

# Function to copy files to destination directory
function copy_files() {
    # You can pass an application name or a installation path
    if [ -e "$1/application.ini" ]; then
        INIS="$1/application.ini"
    else
        INIS=$(dpkg -S $1*/application.ini | awk '{print $NF}')
    fi

    # There can be more instances installed of the same browser
    for INI in $INIS; do
        if [ -e "$INI" ]; then
            KEY_VAL=$(grep 'RemotingName=' "$INI")
            # Skip these versions
            for KEY_WORD in -nightly -beta -dev; do
                [[ $KEY_VAL == *"$KEY_WORD"* ]] && continue 2  # Exit outer loop if inside a nested loop; use `continue` otherwise
            done

            # Loop through all files in this package
            FLSDIR='/usr/share/solydxk/firefox/distribution'
            INSTDIR=$(dirname $INI)
            for F in $FLSDIR/*; do
                FNAME=$(basename $F)
                # Create sub directory
                mkdir -p "$INSTDIR/distribution"
                # Simply copy the file if not equal
                cmp -s "$F" "$INSTDIR/distribution/$FNAME" || cp -vf "$F" "$INSTDIR/distribution/$FNAME"
            done
        fi
    done
}

function remove_files() {
    for F in 'distribution.ini' 'policies.json'; do
        if [ -e "$1/distribution/$F" ]; then
            rm -vf "$1/distribution/$F"
        fi
    done
}

function remove_triggered() {
    [ ! -e "$1" ] && return
    
    BINPATH=$(find "$1" -name "*-bin")
    if [ -z "$BINPATH" ]; then
        remove_files "$1"
    fi
    FLS=$(find "$1" -type f)
    if [ -z "$FLS" ]; then
        rm -rf "$1"
    fi
}

echo "$1"
case "$1" in    
    configure|upgrade|update|reconfigure)
        # Firefox browsers
        copy_files 'firefox'
        #copy_files 'waterfox'
        #copy_files 'librewolf'

        # Remove previously copied files
        remove_files '/opt/waterfox'
        remove_files '/usr/share/librewolf'
    ;;
    triggered)
        # triggered can be used when:
        # 1. A new browser is installed
        # 2. A browser is updated
        copy_files 'firefox'

        #copy_files 'waterfox'
        #copy_files 'librewolf'
        # 3. A browser is removed
        remove_triggered '/usr/lib/firefox-esr'
        remove_triggered '/opt/firefox'
        remove_triggered '/opt/waterfox'
        remove_triggered '/usr/share/librewolf'
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;
    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
